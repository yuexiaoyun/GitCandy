@model GitCandy.Models.RepositoryModel

@{
    ViewBag.Title = string.Format(SR.Shared_TitleFormat, string.Format(SR.Repository_EditTitle, Model.Name));
    var token = GitCandy.Security.Token.Current;
}

<h4>@string.Format(SR.Repository_EditTitle, Model.Name)</h4>


    
    @using (Html.BeginForm("Edit", "Repository", FormMethod.Post, new { @class = "form-horizontal" }))
    {
        <ul class="list-group list-group-lg">
            <li class="ember-view list-group-item">
                @Html.LabelFor(s => s.Name, new { @class = "span3 text-right lead muted" })
                <span class="span1"></span>
                <span class="span5 text-left lead">@Model.Name</span>
                @Html.HiddenFor(s => s.Name)
            </li>
            <li class="ember-view list-group-item">
                <span class="text-error span5 offset4">
                    @Html.ValidationMessageFor(s => s.Name)
                </span>
            </li>

            <li class="ember-view list-group-item">
                @Html.LabelFor(s => s.IsPrivate, new { @class = "span3 text-right lead muted" })
                <span class="span1"></span>
                <div class="switch switch-small" data-on-label="@SR.Shared_Yes" data-off-label="@SR.Shared_No">
                    @Html.CheckBoxFor(s => s.IsPrivate)
                </div>
            </li>

            <li class="ember-view list-group-item">
                @Html.LabelFor(s => s.AllowAnonymousRead, new { @class = "span3 text-right lead muted" })
                <span class="span1"></span>
                <div class="switch switch-small" data-on-label="@SR.Shared_Yes" data-off-label="@SR.Shared_No">
                    @Html.CheckBoxFor(s => s.AllowAnonymousRead)
                </div>
            </li>

            <li class="ember-view list-group-item">
                @Html.LabelFor(s => s.AllowAnonymousWrite, new { @class = "span3 text-right lead muted" })
                <span class="span1"></span>
                <div class="switch switch-small" data-on-label="@SR.Shared_Yes" data-off-label="@SR.Shared_No">
                    @Html.CheckBoxFor(s => s.AllowAnonymousWrite)
                </div>
            </li>

            <li class="ember-view list-group-item">
                @Html.LabelFor(s => s.DefaultBranch, new { @class = "span3 text-right lead muted" })
                <span class="span1"></span>
                <div class="switch switch-small" data-on-label="@SR.Shared_Yes" data-off-label="@SR.Shared_No">
                    @Html.DropDownListFor(s => s.DefaultBranch, Model.LocalBranches.ToSelectListItem(Model.DefaultBranch))
                </div>
            </li>

            <li class="ember-view list-group-item">
                @Html.LabelFor(s => s.Description, new { @class = "span3 text-right lead muted" })
                <span class="span1"></span>
                @Html.TextAreaFor(s => s.Description, 4, 0, new { @class = "span4 text-left lead" })
            </li>
            <li class="ember-view list-group-item">
                <span class="text-error span5 offset4">
                    @Html.ValidationMessageFor(s => s.Description)
                </span>
            </li>
        </ul>
        @Html.ValidationSummary(true, SR.Repository_UpdateUnsuccessfull, new { @class = "alert alert-error" })

    <div class="form-actions">
        <div class="pull-left">
            @Html.ActionLink(SR.Shared_Back, "Detail", new { Model.Name }, new { @class = "btn" })
        </div>
        <div class="pull-right">
            @if (token != null && (Model.CurrentUserIsOwner || token.IsSystemAdministrator))
            {
                @Html.ActionLink(SR.Shared_Delete, "Delete", new { Model.Name }, new { @class = "btn" })
            }
            <button type="reset" class="btn btn-inverse">@SR.Shared_Reset</button>
            <button type="submit" class="btn btn-primary">@SR.Shared_Save</button>
        </div>
    </div>
    }


